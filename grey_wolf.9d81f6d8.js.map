{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["var $54b47fc030b7b21e$exports = {};\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // -----------------------------\n    // To-top button: show/hide + smooth scroll\n    // -----------------------------\n    const toTopBtn = document.querySelector('.to-top');\n    const SHOW_AFTER = 300; // px\n    if (toTopBtn) {\n        const updateVisibility = ()=>{\n            if (window.scrollY > SHOW_AFTER) toTopBtn.classList.add('show');\n            else toTopBtn.classList.remove('show');\n        };\n        // initial state and listeners\n        updateVisibility();\n        window.addEventListener('scroll', updateVisibility, {\n            passive: true\n        });\n        // smooth scroll when clicking the to-top button\n        toTopBtn.addEventListener('click', (ev)=>{\n            ev.preventDefault();\n            const header = document.querySelector('#header') || document.querySelector('header');\n            if (header) header.scrollIntoView({\n                behavior: 'smooth'\n            });\n            else window.scrollTo({\n                top: 0,\n                behavior: 'smooth'\n            });\n        });\n    // (menu wiring moved below so it runs on pages without .to-top)\n    // (Removed leftover/duplicate menu code that referenced undefined variables.)\n    }\n    // Mobile menu: prefer toggling an existing .header__panel when present,\n    // otherwise fall back to the modal implementation.\n    (function() {\n        const burgers = Array.from(document.querySelectorAll('.header__burger'));\n        if (!burgers.length) return;\n        // helper to find panel in a header\n        function findPanelForBurger(b) {\n            const header = b.closest('header') || document.querySelector('header');\n            return header ? header.querySelector('.header__panel') : null;\n        }\n        // CSS class to hide panel (we toggle this instead of inline styles)\n        const HIDDEN_CLASS = 'panel--hidden';\n        // Wire panel-close buttons to hide their .header__panel\n        const panelCloseButtons = Array.from(document.querySelectorAll('.header__panel-close'));\n        panelCloseButtons.forEach((btn)=>{\n            btn.addEventListener('click', (ev)=>{\n                ev.preventDefault();\n                const panel = btn.closest('.header__panel');\n                if (!panel) return;\n                panel.classList.add(HIDDEN_CLASS);\n                // try to restore focus to the header burger if present\n                const header = btn.closest('header');\n                const burger = header ? header.querySelector('.header__burger') : null;\n                if (burger) burger.focus();\n            });\n        });\n        // Modal fallback (keeps previous behavior)\n        let modal = null;\n        let lastFocused = null;\n        function createModal() {\n            if (modal) return modal;\n            modal = document.createElement('div');\n            modal.className = 'mobile-modal';\n            modal.innerHTML = `\n        <div class=\"mobile-modal__backdrop\"></div>\n        <div class=\"mobile-modal__content\" role=\"dialog\" aria-modal=\"true\" aria-label=\"\\u{41C}\\u{435}\\u{43D}\\u{44E}\">\n          <button class=\"mobile-modal__close\" aria-label=\"\\u{417}\\u{430}\\u{43A}\\u{440}\\u{438}\\u{442}\\u{438} \\u{43C}\\u{435}\\u{43D}\\u{44E}\">&times;</button>\n          <nav class=\"mobile-modal__nav\"></nav>\n        </div>\n      `;\n            document.body.appendChild(modal);\n            // handlers\n            const backdrop = modal.querySelector('.mobile-modal__backdrop');\n            const closeBtn = modal.querySelector('.mobile-modal__close');\n            backdrop.addEventListener('click', closeModal);\n            closeBtn.addEventListener('click', closeModal);\n            document.addEventListener('keydown', (ev)=>{\n                if (ev.key === 'Escape' && modal.classList.contains('open')) closeModal();\n            });\n            return modal;\n        }\n        function openModal(headerList) {\n            createModal();\n            lastFocused = document.activeElement;\n            const nav = modal.querySelector('.mobile-modal__nav');\n            nav.innerHTML = '';\n            if (headerList) nav.appendChild(headerList.cloneNode(true));\n            modal.classList.add('open');\n            document.body.style.overflow = 'hidden';\n            const firstLink = modal.querySelector('.mobile-modal__nav .header__list a');\n            if (firstLink) firstLink.focus();\n        }\n        function closeModal() {\n            if (!modal) return;\n            modal.classList.remove('open');\n            document.body.style.overflow = '';\n            if (lastFocused) lastFocused.focus();\n        }\n        // Attach to each burger: toggle panel if present, otherwise open modal\n        burgers.forEach((b)=>{\n            b.addEventListener('click', (ev)=>{\n                ev.preventDefault();\n                const panel = findPanelForBurger(b);\n                if (panel) {\n                    // toggle hidden class\n                    panel.classList.toggle(HIDDEN_CLASS);\n                    // ensure panel is visible if it was hidden\n                    if (!panel.classList.contains(HIDDEN_CLASS)) {\n                        // focus first link inside\n                        const firstLink = panel.querySelector('.header__list a');\n                        if (firstLink) firstLink.focus();\n                    } else b.focus();\n                    return;\n                }\n                // fallback to modal\n                const header = b.closest('header') || document.querySelector('header');\n                const headerList = header ? header.querySelector('.header__list') : null;\n                openModal(headerList);\n            });\n        });\n    })();\n    // -----------------------------\n    // Trainers carousel (preserved)\n    // -----------------------------\n    const track = document.querySelector('.trainers-section__track');\n    if (!track) return;\n    const slides = Array.from(track.children);\n    const prevBtn = document.querySelector('.arrow--prev');\n    const nextBtn = document.querySelector('.arrow--next');\n    const dotsContainer = document.querySelector('.trainers-section__dots');\n    if (!prevBtn || !nextBtn || !dotsContainer) return;\n    let currentIndex = 0;\n    slides.forEach((_, i)=>{\n        const dot = document.createElement('button');\n        dot.className = 'dot';\n        dot.type = 'button';\n        if (i === 0) dot.classList.add('active');\n        dot.addEventListener('click', ()=>{\n            currentIndex = i;\n            updateCarousel();\n        });\n        dotsContainer.appendChild(dot);\n    });\n    const dots = Array.from(dotsContainer.children);\n    function updateCarousel() {\n        const slideWidth = slides[0].getBoundingClientRect().width;\n        track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;\n        dots.forEach((dot, i)=>dot.classList.toggle('active', i === currentIndex));\n    }\n    nextBtn.addEventListener('click', ()=>{\n        currentIndex = (currentIndex + 1) % slides.length;\n        updateCarousel();\n    });\n    prevBtn.addEventListener('click', ()=>{\n        currentIndex = (currentIndex - 1 + slides.length) % slides.length;\n        updateCarousel();\n    });\n    function setSlideWidths() {\n        slides.forEach((slide)=>slide.style.minWidth = `${track.getBoundingClientRect().width}px`);\n        updateCarousel();\n    }\n    window.addEventListener('resize', setSlideWidths);\n    setSlideWidths();\n});\n\n\n//# sourceMappingURL=grey_wolf.9d81f6d8.js.map\n","document.addEventListener('DOMContentLoaded', () => {\r\n  // -----------------------------\r\n  // To-top button: show/hide + smooth scroll\r\n  // -----------------------------\r\n  const toTopBtn = document.querySelector('.to-top');\r\n  const SHOW_AFTER = 300; // px\r\n\r\n  if (toTopBtn) {\r\n    const updateVisibility = () => {\r\n      if (window.scrollY > SHOW_AFTER) toTopBtn.classList.add('show');\r\n      else toTopBtn.classList.remove('show');\r\n    };\r\n\r\n    // initial state and listeners\r\n    updateVisibility();\r\n    window.addEventListener('scroll', updateVisibility, { passive: true });\r\n\r\n    // smooth scroll when clicking the to-top button\r\n    toTopBtn.addEventListener('click', (ev) => {\r\n      ev.preventDefault();\r\n      const header = document.querySelector('#header') || document.querySelector('header');\r\n      if (header) header.scrollIntoView({ behavior: 'smooth' });\r\n      else window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n\r\n    // (menu wiring moved below so it runs on pages without .to-top)\r\n\r\n    // (Removed leftover/duplicate menu code that referenced undefined variables.)\r\n  }\r\n\r\n  // Mobile menu: prefer toggling an existing .header__panel when present,\r\n  // otherwise fall back to the modal implementation.\r\n  (function() {\r\n    const burgers = Array.from(document.querySelectorAll('.header__burger'));\r\n    if (!burgers.length) return;\r\n\r\n    // helper to find panel in a header\r\n    function findPanelForBurger(b) {\r\n      const header = b.closest('header') || document.querySelector('header');\r\n      return header ? header.querySelector('.header__panel') : null;\r\n    }\r\n\r\n    // CSS class to hide panel (we toggle this instead of inline styles)\r\n    const HIDDEN_CLASS = 'panel--hidden';\r\n\r\n    // Wire panel-close buttons to hide their .header__panel\r\n    const panelCloseButtons = Array.from(document.querySelectorAll('.header__panel-close'));\r\n    panelCloseButtons.forEach(btn => {\r\n      btn.addEventListener('click', (ev) => {\r\n        ev.preventDefault();\r\n        const panel = btn.closest('.header__panel');\r\n        if (!panel) return;\r\n        panel.classList.add(HIDDEN_CLASS);\r\n        // try to restore focus to the header burger if present\r\n        const header = btn.closest('header');\r\n        const burger = header ? header.querySelector('.header__burger') : null;\r\n        if (burger) burger.focus();\r\n      });\r\n    });\r\n\r\n    // Modal fallback (keeps previous behavior)\r\n    let modal = null;\r\n    let lastFocused = null;\r\n\r\n    function createModal() {\r\n      if (modal) return modal;\r\n      modal = document.createElement('div');\r\n      modal.className = 'mobile-modal';\r\n      modal.innerHTML = `\r\n        <div class=\"mobile-modal__backdrop\"></div>\r\n        <div class=\"mobile-modal__content\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Меню\">\r\n          <button class=\"mobile-modal__close\" aria-label=\"Закрити меню\">&times;</button>\r\n          <nav class=\"mobile-modal__nav\"></nav>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(modal);\r\n\r\n      // handlers\r\n      const backdrop = modal.querySelector('.mobile-modal__backdrop');\r\n      const closeBtn = modal.querySelector('.mobile-modal__close');\r\n      backdrop.addEventListener('click', closeModal);\r\n      closeBtn.addEventListener('click', closeModal);\r\n      document.addEventListener('keydown', (ev) => {\r\n        if (ev.key === 'Escape' && modal.classList.contains('open')) closeModal();\r\n      });\r\n\r\n      return modal;\r\n    }\r\n\r\n    function openModal(headerList) {\r\n      createModal();\r\n      lastFocused = document.activeElement;\r\n      const nav = modal.querySelector('.mobile-modal__nav');\r\n      nav.innerHTML = '';\r\n      if (headerList) nav.appendChild(headerList.cloneNode(true));\r\n      modal.classList.add('open');\r\n      document.body.style.overflow = 'hidden';\r\n      const firstLink = modal.querySelector('.mobile-modal__nav .header__list a');\r\n      if (firstLink) firstLink.focus();\r\n    }\r\n\r\n    function closeModal() {\r\n      if (!modal) return;\r\n      modal.classList.remove('open');\r\n      document.body.style.overflow = '';\r\n      if (lastFocused) lastFocused.focus();\r\n    }\r\n\r\n    // Attach to each burger: toggle panel if present, otherwise open modal\r\n    burgers.forEach(b => {\r\n      b.addEventListener('click', (ev) => {\r\n        ev.preventDefault();\r\n        const panel = findPanelForBurger(b);\r\n        if (panel) {\r\n          // toggle hidden class\r\n          panel.classList.toggle(HIDDEN_CLASS);\r\n          // ensure panel is visible if it was hidden\r\n          if (!panel.classList.contains(HIDDEN_CLASS)) {\r\n            // focus first link inside\r\n            const firstLink = panel.querySelector('.header__list a');\r\n            if (firstLink) firstLink.focus();\r\n          } else {\r\n            b.focus();\r\n          }\r\n          return;\r\n        }\r\n\r\n        // fallback to modal\r\n        const header = b.closest('header') || document.querySelector('header');\r\n        const headerList = header ? header.querySelector('.header__list') : null;\r\n        openModal(headerList);\r\n      });\r\n    });\r\n  })();\r\n\r\n  // -----------------------------\r\n  // Trainers carousel (preserved)\r\n  // -----------------------------\r\n  const track = document.querySelector('.trainers-section__track');\r\n  if (!track) return;\r\n\r\n  const slides = Array.from(track.children);\r\n  const prevBtn = document.querySelector('.arrow--prev');\r\n  const nextBtn = document.querySelector('.arrow--next');\r\n  const dotsContainer = document.querySelector('.trainers-section__dots');\r\n  if (!prevBtn || !nextBtn || !dotsContainer) return;\r\n\r\n  let currentIndex = 0;\r\n\r\n  slides.forEach((_, i) => {\r\n    const dot = document.createElement('button');\r\n    dot.className = 'dot';\r\n    dot.type = 'button';\r\n    if (i === 0) dot.classList.add('active');\r\n    dot.addEventListener('click', () => {\r\n      currentIndex = i;\r\n      updateCarousel();\r\n    });\r\n    dotsContainer.appendChild(dot);\r\n  });\r\n\r\n  const dots = Array.from(dotsContainer.children);\r\n\r\n  function updateCarousel() {\r\n    const slideWidth = slides[0].getBoundingClientRect().width;\r\n    track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;\r\n    dots.forEach((dot, i) => dot.classList.toggle('active', i === currentIndex));\r\n  }\r\n\r\n  nextBtn.addEventListener('click', () => {\r\n    currentIndex = (currentIndex + 1) % slides.length;\r\n    updateCarousel();\r\n  });\r\n\r\n  prevBtn.addEventListener('click', () => {\r\n    currentIndex = (currentIndex - 1 + slides.length) % slides.length;\r\n    updateCarousel();\r\n  });\r\n\r\n  function setSlideWidths() {\r\n    slides.forEach(slide => slide.style.minWidth = `${track.getBoundingClientRect().width}px`);\r\n    updateCarousel();\r\n  }\r\n\r\n  window.addEventListener('resize', setSlideWidths);\r\n  setSlideWidths();\r\n});\r\n\r\n\r\n"],"names":["document","addEventListener","toTopBtn","querySelector","updateVisibility","window","scrollY","classList","add","remove","passive","ev","preventDefault","header","scrollIntoView","behavior","scrollTo","top","burgers","Array","from","querySelectorAll","length","HIDDEN_CLASS","panelCloseButtons","forEach","btn","panel","closest","burger","focus","modal","lastFocused","closeModal","body","style","overflow","b","findPanelForBurger","toggle","contains","firstLink","headerList","createModal","createElement","className","innerHTML","appendChild","backdrop","closeBtn","key","activeElement","nav","cloneNode","track","slides","children","prevBtn","nextBtn","dotsContainer","currentIndex","_","i","dot","type","updateCarousel","dots","slideWidth","getBoundingClientRect","width","transform","setSlideWidths","slide","minWidth"],"version":3,"file":"grey_wolf.9d81f6d8.js.map"}